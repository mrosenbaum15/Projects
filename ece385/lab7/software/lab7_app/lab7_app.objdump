
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000020

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000008d8 memsz 0x000008d8 flags r-x
    LOAD off    0x000018f8 vaddr 0x080008f8 paddr 0x08000ee4 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000024d0 vaddr 0x080014d0 paddr 0x080014d0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08000020  08000020  00001ee4  2**0
                  CONTENTS
  2 .text         000008c8  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  080008e8  080008e8  000018e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  080008f8  08000ee4  000018f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  080014d0  080014d0  000024d0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001ee4  2**0
                  CONTENTS
  7 .sdram        00000000  080014e0  080014e0  00001ee4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002b0  00000000  00000000  00001f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003a16  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000118d  00000000  00000000  00005bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001218  00000000  00000000  00006d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000040c  00000000  00000000  00007f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e8a  00000000  00000000  00008380  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000430  00000000  00000000  0000920a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000963c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000080  00000000  00000000  00009650  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000a88e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000a891  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a89d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a89e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000a89f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000a8a3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000a8a7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000a8ab  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000a8af  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000a8b3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000a8b7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000007  00000000  00000000  0000a8bf  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000a8c6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005c4d5  00000000  00000000  0000e67b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000020 l    d  .text	00000000 .text
080008e8 l    d  .rodata	00000000 .rodata
080008f8 l    d  .rwdata	00000000 .rwdata
080014d0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080014e0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
08000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
08000118 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
080002c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080003f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08000aa0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
08000204 g     F .text	00000060 alt_main
08000ee4 g       *ABS*	00000000 __flash_rwdata_start
08000584 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080014dc g     O .bss	00000004 errno
080014d4 g     O .bss	00000004 alt_argv
08008ec4 g       *ABS*	00000000 _gp
08000920 g     O .rwdata	00000180 alt_fd_list
080008e8 g       *ABS*	00000000 __DTOR_END__
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000ed4 g     O .rwdata	00000004 alt_max_fd
08000edc g     O .rwdata	00000004 _global_impure_ptr
080014e0 g       *ABS*	00000000 __bss_end
080008f8 g     O .rwdata	00000028 alt_dev_null
080003d4 g     F .text	00000020 alt_dcache_flush_all
08000ee4 g       *ABS*	00000000 __ram_rwdata_end
08000ecc g     O .rwdata	00000008 alt_dev_list
080008f8 g       *ABS*	00000000 __ram_rodata_end
080014e0 g       *ABS*	00000000 end
080008e8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800070c g     F .text	00000180 __call_exitprocs
08000020 g     F .text	0000003c _start
0800029c g     F .text	00000024 alt_sys_init
080005f4 g     F .text	00000118 __register_exitproc
0800088c g     F .text	00000028 .hidden __mulsi3
080008f8 g       *ABS*	00000000 __ram_rwdata_start
080008e8 g       *ABS*	00000000 __ram_rodata_start
080014e0 g       *ABS*	00000000 __alt_stack_base
080014d0 g       *ABS*	00000000 __bss_start
0800005c g     F .text	000000bc main
080014d8 g     O .bss	00000004 alt_envp
08000ed8 g     O .rwdata	00000004 alt_errno
080008e8 g       *ABS*	00000000 __CTOR_END__
080008e8 g       *ABS*	00000000 __flash_rodata_start
080008e8 g       *ABS*	00000000 __DTOR_LIST__
08000264 g     F .text	00000038 alt_irq_init
08000500 g     F .text	00000084 alt_release_fd
080005a8 g     F .text	00000014 atexit
08000ee0 g     O .rwdata	00000004 _impure_ptr
080014d0 g     O .bss	00000004 alt_argc
08000480 g     F .text	00000060 _do_dtors
08000ec4 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000ee4 g       *ABS*	00000000 _edata
080014e0 g       *ABS*	00000000 _end
08000020 g       *ABS*	00000000 __ram_exceptions_end
080005bc g     F .text	00000038 exit
0c000000 g       *ABS*	00000000 __alt_data_end
08000000 g       *ABS*	00000000 __alt_mem_sdram
080008b4 g     F .text	00000034 _exit
080004e0 g     F .text	00000020 alt_icache_flush_all
08000420 g     F .text	00000060 _do_ctors
080002fc g     F .text	000000d8 close
08000180 g     F .text	00000084 alt_load



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08400814 	ori	at,at,32
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

08000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000020:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000028:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800002c:	d6a3b114 	ori	gp,gp,36548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000034:	10853414 	ori	r2,r2,5328

    movhi r3, %hi(__bss_end)
 8000038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800003c:	18c53814 	ori	r3,r3,5344

    beq r2, r3, 1f
 8000040:	10c00326 	beq	r2,r3,8000050 <_start+0x30>

0:
    stw zero, (r2)
 8000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800004c:	10fffd36 	bltu	r2,r3,8000044 <__alt_data_end+0xfc000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000050:	80001800 	call	8000180 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000054:	80002040 	call	8000204 <alt_main>

08000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000058:	003fff06 	br	8000058 <__alt_data_end+0xfc000058>

0800005c <main>:
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
 800005c:	defff704 	addi	sp,sp,-36
 8000060:	df000815 	stw	fp,32(sp)
 8000064:	df000804 	addi	fp,sp,32
	// making simple MACROs for 1 and 0
	int HIGH = 1;
 8000068:	00800044 	movi	r2,1
 800006c:	e0bff915 	stw	r2,-28(fp)
	int LOW = 0;
 8000070:	e03ffa15 	stw	zero,-24(fp)
	volatile unsigned int total;

	//int i = 0;

	// addresses set in design planner
	volatile unsigned int *LED_PIO = (unsigned int*)0x90; //make a pointer to access the PIO block
 8000074:	00802404 	movi	r2,144
 8000078:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int *SW_PIO = (unsigned int*)0x80; //make a pointer to access the PIO block
 800007c:	00802004 	movi	r2,128
 8000080:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *ACC_PIO = (unsigned int*)0x70; //make a pointer to access the PIO block
 8000084:	00801c04 	movi	r2,112
 8000088:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *A_RESET_PIO = (unsigned int*)0x60; //make a pointer to access the PIO block
 800008c:	00801804 	movi	r2,96
 8000090:	e0bffe15 	stw	r2,-8(fp)

	*LED_PIO = LOW; //clear all LEDs
 8000094:	e0fffa17 	ldw	r3,-24(fp)
 8000098:	e0bffb17 	ldw	r2,-20(fp)
 800009c:	10c00015 	stw	r3,0(r2)
	pause = total = LOW; // sum and pause set to low at first
 80000a0:	e0bffa17 	ldw	r2,-24(fp)
 80000a4:	e0bfff15 	stw	r2,-4(fp)
 80000a8:	e0bff815 	stw	r2,-32(fp)
//		*LED_PIO |= 0x1; //set LSB
//		for (i = 0; i < 100000; i++); //software delay
//		*LED_PIO &= ~0x1; //clear LSB

		// clearing total if reset is high
		if(*A_RESET_PIO == HIGH)
 80000ac:	e0bffe17 	ldw	r2,-8(fp)
 80000b0:	10c00017 	ldw	r3,0(r2)
 80000b4:	e0bff917 	ldw	r2,-28(fp)
 80000b8:	1880021e 	bne	r3,r2,80000c4 <main+0x68>
			total = LOW;
 80000bc:	e0bffa17 	ldw	r2,-24(fp)
 80000c0:	e0bfff15 	stw	r2,-4(fp)

		// next state is paused state
		if(*ACC_PIO == LOW)
 80000c4:	e0bffd17 	ldw	r2,-12(fp)
 80000c8:	10c00017 	ldw	r3,0(r2)
 80000cc:	e0bffa17 	ldw	r2,-24(fp)
 80000d0:	1880031e 	bne	r3,r2,80000e0 <main+0x84>
				pause = LOW;
 80000d4:	e0bffa17 	ldw	r2,-24(fp)
 80000d8:	e0bff815 	stw	r2,-32(fp)
 80000dc:	00000a06 	br	8000108 <main+0xac>

		// pausing and adding values from switches
		else if(pause == LOW) {
 80000e0:	e0fff817 	ldw	r3,-32(fp)
 80000e4:	e0bffa17 	ldw	r2,-24(fp)
 80000e8:	1880071e 	bne	r3,r2,8000108 <main+0xac>
			pause = HIGH;
 80000ec:	e0bff917 	ldw	r2,-28(fp)
 80000f0:	e0bff815 	stw	r2,-32(fp)
			total = total + *SW_PIO;
 80000f4:	e0bffc17 	ldw	r2,-16(fp)
 80000f8:	10c00017 	ldw	r3,0(r2)
 80000fc:	e0bfff17 	ldw	r2,-4(fp)
 8000100:	1885883a 	add	r2,r3,r2
 8000104:	e0bfff15 	stw	r2,-4(fp)
		}

		// adjusting LEDs
		*LED_PIO = total;
 8000108:	e0ffff17 	ldw	r3,-4(fp)
 800010c:	e0bffb17 	ldw	r2,-20(fp)
 8000110:	10c00015 	stw	r3,0(r2)

	}
 8000114:	003fe506 	br	80000ac <__alt_data_end+0xfc0000ac>

08000118 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8000118:	defffc04 	addi	sp,sp,-16
 800011c:	df000315 	stw	fp,12(sp)
 8000120:	df000304 	addi	fp,sp,12
 8000124:	e13ffd15 	stw	r4,-12(fp)
 8000128:	e17ffe15 	stw	r5,-8(fp)
 800012c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8000130:	e0fffe17 	ldw	r3,-8(fp)
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	18800c26 	beq	r3,r2,800016c <alt_load_section+0x54>
  {
    while( to != end )
 800013c:	00000806 	br	8000160 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8000140:	e0bffe17 	ldw	r2,-8(fp)
 8000144:	10c00104 	addi	r3,r2,4
 8000148:	e0fffe15 	stw	r3,-8(fp)
 800014c:	e0fffd17 	ldw	r3,-12(fp)
 8000150:	19000104 	addi	r4,r3,4
 8000154:	e13ffd15 	stw	r4,-12(fp)
 8000158:	18c00017 	ldw	r3,0(r3)
 800015c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8000160:	e0fffe17 	ldw	r3,-8(fp)
 8000164:	e0bfff17 	ldw	r2,-4(fp)
 8000168:	18bff51e 	bne	r3,r2,8000140 <__alt_data_end+0xfc000140>
    {
      *to++ = *from++;
    }
  }
}
 800016c:	0001883a 	nop
 8000170:	e037883a 	mov	sp,fp
 8000174:	df000017 	ldw	fp,0(sp)
 8000178:	dec00104 	addi	sp,sp,4
 800017c:	f800283a 	ret

08000180 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000180:	defffe04 	addi	sp,sp,-8
 8000184:	dfc00115 	stw	ra,4(sp)
 8000188:	df000015 	stw	fp,0(sp)
 800018c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8000190:	01820034 	movhi	r6,2048
 8000194:	3183b904 	addi	r6,r6,3812
 8000198:	01420034 	movhi	r5,2048
 800019c:	29423e04 	addi	r5,r5,2296
 80001a0:	01020034 	movhi	r4,2048
 80001a4:	2103b904 	addi	r4,r4,3812
 80001a8:	80001180 	call	8000118 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80001ac:	01820034 	movhi	r6,2048
 80001b0:	31800804 	addi	r6,r6,32
 80001b4:	01420034 	movhi	r5,2048
 80001b8:	29400804 	addi	r5,r5,32
 80001bc:	01020034 	movhi	r4,2048
 80001c0:	21000804 	addi	r4,r4,32
 80001c4:	80001180 	call	8000118 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80001c8:	01820034 	movhi	r6,2048
 80001cc:	31823e04 	addi	r6,r6,2296
 80001d0:	01420034 	movhi	r5,2048
 80001d4:	29423a04 	addi	r5,r5,2280
 80001d8:	01020034 	movhi	r4,2048
 80001dc:	21023a04 	addi	r4,r4,2280
 80001e0:	80001180 	call	8000118 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80001e4:	80003d40 	call	80003d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80001e8:	80004e00 	call	80004e0 <alt_icache_flush_all>
}
 80001ec:	0001883a 	nop
 80001f0:	e037883a 	mov	sp,fp
 80001f4:	dfc00117 	ldw	ra,4(sp)
 80001f8:	df000017 	ldw	fp,0(sp)
 80001fc:	dec00204 	addi	sp,sp,8
 8000200:	f800283a 	ret

08000204 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8000204:	defffd04 	addi	sp,sp,-12
 8000208:	dfc00215 	stw	ra,8(sp)
 800020c:	df000115 	stw	fp,4(sp)
 8000210:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8000214:	0009883a 	mov	r4,zero
 8000218:	80002640 	call	8000264 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800021c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000220:	800029c0 	call	800029c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8000224:	80004200 	call	8000420 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8000228:	01020034 	movhi	r4,2048
 800022c:	21012004 	addi	r4,r4,1152
 8000230:	80005a80 	call	80005a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8000234:	d0a18317 	ldw	r2,-31220(gp)
 8000238:	d0e18417 	ldw	r3,-31216(gp)
 800023c:	d1218517 	ldw	r4,-31212(gp)
 8000240:	200d883a 	mov	r6,r4
 8000244:	180b883a 	mov	r5,r3
 8000248:	1009883a 	mov	r4,r2
 800024c:	800005c0 	call	800005c <main>
 8000250:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000254:	01000044 	movi	r4,1
 8000258:	80002fc0 	call	80002fc <close>
  exit (result);
 800025c:	e13fff17 	ldw	r4,-4(fp)
 8000260:	80005bc0 	call	80005bc <exit>

08000264 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000264:	defffd04 	addi	sp,sp,-12
 8000268:	dfc00215 	stw	ra,8(sp)
 800026c:	df000115 	stw	fp,4(sp)
 8000270:	df000104 	addi	fp,sp,4
 8000274:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8000278:	80005840 	call	8000584 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800027c:	00800044 	movi	r2,1
 8000280:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000284:	0001883a 	nop
 8000288:	e037883a 	mov	sp,fp
 800028c:	dfc00117 	ldw	ra,4(sp)
 8000290:	df000017 	ldw	fp,0(sp)
 8000294:	dec00204 	addi	sp,sp,8
 8000298:	f800283a 	ret

0800029c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800029c:	deffff04 	addi	sp,sp,-4
 80002a0:	df000015 	stw	fp,0(sp)
 80002a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80002a8:	0001883a 	nop
}
 80002ac:	0001883a 	nop
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	df000017 	ldw	fp,0(sp)
 80002b8:	dec00104 	addi	sp,sp,4
 80002bc:	f800283a 	ret

080002c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80002c0:	defffe04 	addi	sp,sp,-8
 80002c4:	dfc00115 	stw	ra,4(sp)
 80002c8:	df000015 	stw	fp,0(sp)
 80002cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80002d0:	d0a00517 	ldw	r2,-32748(gp)
 80002d4:	10000326 	beq	r2,zero,80002e4 <alt_get_errno+0x24>
 80002d8:	d0a00517 	ldw	r2,-32748(gp)
 80002dc:	103ee83a 	callr	r2
 80002e0:	00000106 	br	80002e8 <alt_get_errno+0x28>
 80002e4:	d0a18604 	addi	r2,gp,-31208
}
 80002e8:	e037883a 	mov	sp,fp
 80002ec:	dfc00117 	ldw	ra,4(sp)
 80002f0:	df000017 	ldw	fp,0(sp)
 80002f4:	dec00204 	addi	sp,sp,8
 80002f8:	f800283a 	ret

080002fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80002fc:	defffb04 	addi	sp,sp,-20
 8000300:	dfc00415 	stw	ra,16(sp)
 8000304:	df000315 	stw	fp,12(sp)
 8000308:	df000304 	addi	fp,sp,12
 800030c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8000310:	e0bfff17 	ldw	r2,-4(fp)
 8000314:	10000816 	blt	r2,zero,8000338 <close+0x3c>
 8000318:	01400304 	movi	r5,12
 800031c:	e13fff17 	ldw	r4,-4(fp)
 8000320:	800088c0 	call	800088c <__mulsi3>
 8000324:	1007883a 	mov	r3,r2
 8000328:	00820034 	movhi	r2,2048
 800032c:	10824804 	addi	r2,r2,2336
 8000330:	1885883a 	add	r2,r3,r2
 8000334:	00000106 	br	800033c <close+0x40>
 8000338:	0005883a 	mov	r2,zero
 800033c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8000340:	e0bffd17 	ldw	r2,-12(fp)
 8000344:	10001926 	beq	r2,zero,80003ac <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8000348:	e0bffd17 	ldw	r2,-12(fp)
 800034c:	10800017 	ldw	r2,0(r2)
 8000350:	10800417 	ldw	r2,16(r2)
 8000354:	10000626 	beq	r2,zero,8000370 <close+0x74>
 8000358:	e0bffd17 	ldw	r2,-12(fp)
 800035c:	10800017 	ldw	r2,0(r2)
 8000360:	10800417 	ldw	r2,16(r2)
 8000364:	e13ffd17 	ldw	r4,-12(fp)
 8000368:	103ee83a 	callr	r2
 800036c:	00000106 	br	8000374 <close+0x78>
 8000370:	0005883a 	mov	r2,zero
 8000374:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8000378:	e13fff17 	ldw	r4,-4(fp)
 800037c:	80005000 	call	8000500 <alt_release_fd>
    if (rval < 0)
 8000380:	e0bffe17 	ldw	r2,-8(fp)
 8000384:	1000070e 	bge	r2,zero,80003a4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8000388:	80002c00 	call	80002c0 <alt_get_errno>
 800038c:	1007883a 	mov	r3,r2
 8000390:	e0bffe17 	ldw	r2,-8(fp)
 8000394:	0085c83a 	sub	r2,zero,r2
 8000398:	18800015 	stw	r2,0(r3)
      return -1;
 800039c:	00bfffc4 	movi	r2,-1
 80003a0:	00000706 	br	80003c0 <close+0xc4>
    }
    return 0;
 80003a4:	0005883a 	mov	r2,zero
 80003a8:	00000506 	br	80003c0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80003ac:	80002c00 	call	80002c0 <alt_get_errno>
 80003b0:	1007883a 	mov	r3,r2
 80003b4:	00801444 	movi	r2,81
 80003b8:	18800015 	stw	r2,0(r3)
    return -1;
 80003bc:	00bfffc4 	movi	r2,-1
  }
}
 80003c0:	e037883a 	mov	sp,fp
 80003c4:	dfc00117 	ldw	ra,4(sp)
 80003c8:	df000017 	ldw	fp,0(sp)
 80003cc:	dec00204 	addi	sp,sp,8
 80003d0:	f800283a 	ret

080003d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80003d4:	deffff04 	addi	sp,sp,-4
 80003d8:	df000015 	stw	fp,0(sp)
 80003dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80003e0:	0001883a 	nop
 80003e4:	e037883a 	mov	sp,fp
 80003e8:	df000017 	ldw	fp,0(sp)
 80003ec:	dec00104 	addi	sp,sp,4
 80003f0:	f800283a 	ret

080003f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80003f4:	defffc04 	addi	sp,sp,-16
 80003f8:	df000315 	stw	fp,12(sp)
 80003fc:	df000304 	addi	fp,sp,12
 8000400:	e13ffd15 	stw	r4,-12(fp)
 8000404:	e17ffe15 	stw	r5,-8(fp)
 8000408:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800040c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000410:	e037883a 	mov	sp,fp
 8000414:	df000017 	ldw	fp,0(sp)
 8000418:	dec00104 	addi	sp,sp,4
 800041c:	f800283a 	ret

08000420 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8000420:	defffd04 	addi	sp,sp,-12
 8000424:	dfc00215 	stw	ra,8(sp)
 8000428:	df000115 	stw	fp,4(sp)
 800042c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8000430:	00820034 	movhi	r2,2048
 8000434:	10823904 	addi	r2,r2,2276
 8000438:	e0bfff15 	stw	r2,-4(fp)
 800043c:	00000606 	br	8000458 <_do_ctors+0x38>
        (*ctor) (); 
 8000440:	e0bfff17 	ldw	r2,-4(fp)
 8000444:	10800017 	ldw	r2,0(r2)
 8000448:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800044c:	e0bfff17 	ldw	r2,-4(fp)
 8000450:	10bfff04 	addi	r2,r2,-4
 8000454:	e0bfff15 	stw	r2,-4(fp)
 8000458:	e0ffff17 	ldw	r3,-4(fp)
 800045c:	00820034 	movhi	r2,2048
 8000460:	10823a04 	addi	r2,r2,2280
 8000464:	18bff62e 	bgeu	r3,r2,8000440 <__alt_data_end+0xfc000440>
        (*ctor) (); 
}
 8000468:	0001883a 	nop
 800046c:	e037883a 	mov	sp,fp
 8000470:	dfc00117 	ldw	ra,4(sp)
 8000474:	df000017 	ldw	fp,0(sp)
 8000478:	dec00204 	addi	sp,sp,8
 800047c:	f800283a 	ret

08000480 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8000480:	defffd04 	addi	sp,sp,-12
 8000484:	dfc00215 	stw	ra,8(sp)
 8000488:	df000115 	stw	fp,4(sp)
 800048c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8000490:	00820034 	movhi	r2,2048
 8000494:	10823904 	addi	r2,r2,2276
 8000498:	e0bfff15 	stw	r2,-4(fp)
 800049c:	00000606 	br	80004b8 <_do_dtors+0x38>
        (*dtor) (); 
 80004a0:	e0bfff17 	ldw	r2,-4(fp)
 80004a4:	10800017 	ldw	r2,0(r2)
 80004a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80004ac:	e0bfff17 	ldw	r2,-4(fp)
 80004b0:	10bfff04 	addi	r2,r2,-4
 80004b4:	e0bfff15 	stw	r2,-4(fp)
 80004b8:	e0ffff17 	ldw	r3,-4(fp)
 80004bc:	00820034 	movhi	r2,2048
 80004c0:	10823a04 	addi	r2,r2,2280
 80004c4:	18bff62e 	bgeu	r3,r2,80004a0 <__alt_data_end+0xfc0004a0>
        (*dtor) (); 
}
 80004c8:	0001883a 	nop
 80004cc:	e037883a 	mov	sp,fp
 80004d0:	dfc00117 	ldw	ra,4(sp)
 80004d4:	df000017 	ldw	fp,0(sp)
 80004d8:	dec00204 	addi	sp,sp,8
 80004dc:	f800283a 	ret

080004e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80004e0:	deffff04 	addi	sp,sp,-4
 80004e4:	df000015 	stw	fp,0(sp)
 80004e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80004ec:	0001883a 	nop
 80004f0:	e037883a 	mov	sp,fp
 80004f4:	df000017 	ldw	fp,0(sp)
 80004f8:	dec00104 	addi	sp,sp,4
 80004fc:	f800283a 	ret

08000500 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8000500:	defffc04 	addi	sp,sp,-16
 8000504:	dfc00315 	stw	ra,12(sp)
 8000508:	df000215 	stw	fp,8(sp)
 800050c:	dc000115 	stw	r16,4(sp)
 8000510:	df000204 	addi	fp,sp,8
 8000514:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8000518:	e0bffe17 	ldw	r2,-8(fp)
 800051c:	108000d0 	cmplti	r2,r2,3
 8000520:	1000111e 	bne	r2,zero,8000568 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8000524:	04020034 	movhi	r16,2048
 8000528:	84024804 	addi	r16,r16,2336
 800052c:	e0bffe17 	ldw	r2,-8(fp)
 8000530:	01400304 	movi	r5,12
 8000534:	1009883a 	mov	r4,r2
 8000538:	800088c0 	call	800088c <__mulsi3>
 800053c:	8085883a 	add	r2,r16,r2
 8000540:	10800204 	addi	r2,r2,8
 8000544:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8000548:	04020034 	movhi	r16,2048
 800054c:	84024804 	addi	r16,r16,2336
 8000550:	e0bffe17 	ldw	r2,-8(fp)
 8000554:	01400304 	movi	r5,12
 8000558:	1009883a 	mov	r4,r2
 800055c:	800088c0 	call	800088c <__mulsi3>
 8000560:	8085883a 	add	r2,r16,r2
 8000564:	10000015 	stw	zero,0(r2)
  }
}
 8000568:	0001883a 	nop
 800056c:	e6ffff04 	addi	sp,fp,-4
 8000570:	dfc00217 	ldw	ra,8(sp)
 8000574:	df000117 	ldw	fp,4(sp)
 8000578:	dc000017 	ldw	r16,0(sp)
 800057c:	dec00304 	addi	sp,sp,12
 8000580:	f800283a 	ret

08000584 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8000584:	deffff04 	addi	sp,sp,-4
 8000588:	df000015 	stw	fp,0(sp)
 800058c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8000590:	000170fa 	wrctl	ienable,zero
}
 8000594:	0001883a 	nop
 8000598:	e037883a 	mov	sp,fp
 800059c:	df000017 	ldw	fp,0(sp)
 80005a0:	dec00104 	addi	sp,sp,4
 80005a4:	f800283a 	ret

080005a8 <atexit>:
 80005a8:	200b883a 	mov	r5,r4
 80005ac:	000f883a 	mov	r7,zero
 80005b0:	000d883a 	mov	r6,zero
 80005b4:	0009883a 	mov	r4,zero
 80005b8:	80005f41 	jmpi	80005f4 <__register_exitproc>

080005bc <exit>:
 80005bc:	defffe04 	addi	sp,sp,-8
 80005c0:	000b883a 	mov	r5,zero
 80005c4:	dc000015 	stw	r16,0(sp)
 80005c8:	dfc00115 	stw	ra,4(sp)
 80005cc:	2021883a 	mov	r16,r4
 80005d0:	800070c0 	call	800070c <__call_exitprocs>
 80005d4:	00820034 	movhi	r2,2048
 80005d8:	1083b704 	addi	r2,r2,3804
 80005dc:	11000017 	ldw	r4,0(r2)
 80005e0:	20800f17 	ldw	r2,60(r4)
 80005e4:	10000126 	beq	r2,zero,80005ec <exit+0x30>
 80005e8:	103ee83a 	callr	r2
 80005ec:	8009883a 	mov	r4,r16
 80005f0:	80008b40 	call	80008b4 <_exit>

080005f4 <__register_exitproc>:
 80005f4:	defffa04 	addi	sp,sp,-24
 80005f8:	dc000315 	stw	r16,12(sp)
 80005fc:	04020034 	movhi	r16,2048
 8000600:	8403b704 	addi	r16,r16,3804
 8000604:	80c00017 	ldw	r3,0(r16)
 8000608:	dc400415 	stw	r17,16(sp)
 800060c:	dfc00515 	stw	ra,20(sp)
 8000610:	18805217 	ldw	r2,328(r3)
 8000614:	2023883a 	mov	r17,r4
 8000618:	10003726 	beq	r2,zero,80006f8 <__register_exitproc+0x104>
 800061c:	10c00117 	ldw	r3,4(r2)
 8000620:	010007c4 	movi	r4,31
 8000624:	20c00e16 	blt	r4,r3,8000660 <__register_exitproc+0x6c>
 8000628:	1a000044 	addi	r8,r3,1
 800062c:	8800221e 	bne	r17,zero,80006b8 <__register_exitproc+0xc4>
 8000630:	18c00084 	addi	r3,r3,2
 8000634:	18c7883a 	add	r3,r3,r3
 8000638:	18c7883a 	add	r3,r3,r3
 800063c:	12000115 	stw	r8,4(r2)
 8000640:	10c7883a 	add	r3,r2,r3
 8000644:	19400015 	stw	r5,0(r3)
 8000648:	0005883a 	mov	r2,zero
 800064c:	dfc00517 	ldw	ra,20(sp)
 8000650:	dc400417 	ldw	r17,16(sp)
 8000654:	dc000317 	ldw	r16,12(sp)
 8000658:	dec00604 	addi	sp,sp,24
 800065c:	f800283a 	ret
 8000660:	00800034 	movhi	r2,0
 8000664:	10800004 	addi	r2,r2,0
 8000668:	10002626 	beq	r2,zero,8000704 <__register_exitproc+0x110>
 800066c:	01006404 	movi	r4,400
 8000670:	d9400015 	stw	r5,0(sp)
 8000674:	d9800115 	stw	r6,4(sp)
 8000678:	d9c00215 	stw	r7,8(sp)
 800067c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8000680:	d9400017 	ldw	r5,0(sp)
 8000684:	d9800117 	ldw	r6,4(sp)
 8000688:	d9c00217 	ldw	r7,8(sp)
 800068c:	10001d26 	beq	r2,zero,8000704 <__register_exitproc+0x110>
 8000690:	81000017 	ldw	r4,0(r16)
 8000694:	10000115 	stw	zero,4(r2)
 8000698:	02000044 	movi	r8,1
 800069c:	22405217 	ldw	r9,328(r4)
 80006a0:	0007883a 	mov	r3,zero
 80006a4:	12400015 	stw	r9,0(r2)
 80006a8:	20805215 	stw	r2,328(r4)
 80006ac:	10006215 	stw	zero,392(r2)
 80006b0:	10006315 	stw	zero,396(r2)
 80006b4:	883fde26 	beq	r17,zero,8000630 <__alt_data_end+0xfc000630>
 80006b8:	18c9883a 	add	r4,r3,r3
 80006bc:	2109883a 	add	r4,r4,r4
 80006c0:	1109883a 	add	r4,r2,r4
 80006c4:	21802215 	stw	r6,136(r4)
 80006c8:	01800044 	movi	r6,1
 80006cc:	12406217 	ldw	r9,392(r2)
 80006d0:	30cc983a 	sll	r6,r6,r3
 80006d4:	4992b03a 	or	r9,r9,r6
 80006d8:	12406215 	stw	r9,392(r2)
 80006dc:	21c04215 	stw	r7,264(r4)
 80006e0:	01000084 	movi	r4,2
 80006e4:	893fd21e 	bne	r17,r4,8000630 <__alt_data_end+0xfc000630>
 80006e8:	11006317 	ldw	r4,396(r2)
 80006ec:	218cb03a 	or	r6,r4,r6
 80006f0:	11806315 	stw	r6,396(r2)
 80006f4:	003fce06 	br	8000630 <__alt_data_end+0xfc000630>
 80006f8:	18805304 	addi	r2,r3,332
 80006fc:	18805215 	stw	r2,328(r3)
 8000700:	003fc606 	br	800061c <__alt_data_end+0xfc00061c>
 8000704:	00bfffc4 	movi	r2,-1
 8000708:	003fd006 	br	800064c <__alt_data_end+0xfc00064c>

0800070c <__call_exitprocs>:
 800070c:	defff504 	addi	sp,sp,-44
 8000710:	df000915 	stw	fp,36(sp)
 8000714:	dd400615 	stw	r21,24(sp)
 8000718:	dc800315 	stw	r18,12(sp)
 800071c:	dfc00a15 	stw	ra,40(sp)
 8000720:	ddc00815 	stw	r23,32(sp)
 8000724:	dd800715 	stw	r22,28(sp)
 8000728:	dd000515 	stw	r20,20(sp)
 800072c:	dcc00415 	stw	r19,16(sp)
 8000730:	dc400215 	stw	r17,8(sp)
 8000734:	dc000115 	stw	r16,4(sp)
 8000738:	d9000015 	stw	r4,0(sp)
 800073c:	2839883a 	mov	fp,r5
 8000740:	04800044 	movi	r18,1
 8000744:	057fffc4 	movi	r21,-1
 8000748:	00820034 	movhi	r2,2048
 800074c:	1083b704 	addi	r2,r2,3804
 8000750:	12000017 	ldw	r8,0(r2)
 8000754:	45005217 	ldw	r20,328(r8)
 8000758:	44c05204 	addi	r19,r8,328
 800075c:	a0001c26 	beq	r20,zero,80007d0 <__call_exitprocs+0xc4>
 8000760:	a0800117 	ldw	r2,4(r20)
 8000764:	15ffffc4 	addi	r23,r2,-1
 8000768:	b8000d16 	blt	r23,zero,80007a0 <__call_exitprocs+0x94>
 800076c:	14000044 	addi	r16,r2,1
 8000770:	8421883a 	add	r16,r16,r16
 8000774:	8421883a 	add	r16,r16,r16
 8000778:	84402004 	addi	r17,r16,128
 800077c:	a463883a 	add	r17,r20,r17
 8000780:	a421883a 	add	r16,r20,r16
 8000784:	e0001e26 	beq	fp,zero,8000800 <__call_exitprocs+0xf4>
 8000788:	80804017 	ldw	r2,256(r16)
 800078c:	e0801c26 	beq	fp,r2,8000800 <__call_exitprocs+0xf4>
 8000790:	bdffffc4 	addi	r23,r23,-1
 8000794:	843fff04 	addi	r16,r16,-4
 8000798:	8c7fff04 	addi	r17,r17,-4
 800079c:	bd7ff91e 	bne	r23,r21,8000784 <__alt_data_end+0xfc000784>
 80007a0:	00800034 	movhi	r2,0
 80007a4:	10800004 	addi	r2,r2,0
 80007a8:	10000926 	beq	r2,zero,80007d0 <__call_exitprocs+0xc4>
 80007ac:	a0800117 	ldw	r2,4(r20)
 80007b0:	1000301e 	bne	r2,zero,8000874 <__call_exitprocs+0x168>
 80007b4:	a0800017 	ldw	r2,0(r20)
 80007b8:	10003226 	beq	r2,zero,8000884 <__call_exitprocs+0x178>
 80007bc:	a009883a 	mov	r4,r20
 80007c0:	98800015 	stw	r2,0(r19)
 80007c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80007c8:	9d000017 	ldw	r20,0(r19)
 80007cc:	a03fe41e 	bne	r20,zero,8000760 <__alt_data_end+0xfc000760>
 80007d0:	dfc00a17 	ldw	ra,40(sp)
 80007d4:	df000917 	ldw	fp,36(sp)
 80007d8:	ddc00817 	ldw	r23,32(sp)
 80007dc:	dd800717 	ldw	r22,28(sp)
 80007e0:	dd400617 	ldw	r21,24(sp)
 80007e4:	dd000517 	ldw	r20,20(sp)
 80007e8:	dcc00417 	ldw	r19,16(sp)
 80007ec:	dc800317 	ldw	r18,12(sp)
 80007f0:	dc400217 	ldw	r17,8(sp)
 80007f4:	dc000117 	ldw	r16,4(sp)
 80007f8:	dec00b04 	addi	sp,sp,44
 80007fc:	f800283a 	ret
 8000800:	a0800117 	ldw	r2,4(r20)
 8000804:	80c00017 	ldw	r3,0(r16)
 8000808:	10bfffc4 	addi	r2,r2,-1
 800080c:	15c01426 	beq	r2,r23,8000860 <__call_exitprocs+0x154>
 8000810:	80000015 	stw	zero,0(r16)
 8000814:	183fde26 	beq	r3,zero,8000790 <__alt_data_end+0xfc000790>
 8000818:	95c8983a 	sll	r4,r18,r23
 800081c:	a0806217 	ldw	r2,392(r20)
 8000820:	a5800117 	ldw	r22,4(r20)
 8000824:	2084703a 	and	r2,r4,r2
 8000828:	10000b26 	beq	r2,zero,8000858 <__call_exitprocs+0x14c>
 800082c:	a0806317 	ldw	r2,396(r20)
 8000830:	2088703a 	and	r4,r4,r2
 8000834:	20000c1e 	bne	r4,zero,8000868 <__call_exitprocs+0x15c>
 8000838:	89400017 	ldw	r5,0(r17)
 800083c:	d9000017 	ldw	r4,0(sp)
 8000840:	183ee83a 	callr	r3
 8000844:	a0800117 	ldw	r2,4(r20)
 8000848:	15bfbf1e 	bne	r2,r22,8000748 <__alt_data_end+0xfc000748>
 800084c:	98800017 	ldw	r2,0(r19)
 8000850:	153fcf26 	beq	r2,r20,8000790 <__alt_data_end+0xfc000790>
 8000854:	003fbc06 	br	8000748 <__alt_data_end+0xfc000748>
 8000858:	183ee83a 	callr	r3
 800085c:	003ff906 	br	8000844 <__alt_data_end+0xfc000844>
 8000860:	a5c00115 	stw	r23,4(r20)
 8000864:	003feb06 	br	8000814 <__alt_data_end+0xfc000814>
 8000868:	89000017 	ldw	r4,0(r17)
 800086c:	183ee83a 	callr	r3
 8000870:	003ff406 	br	8000844 <__alt_data_end+0xfc000844>
 8000874:	a0800017 	ldw	r2,0(r20)
 8000878:	a027883a 	mov	r19,r20
 800087c:	1029883a 	mov	r20,r2
 8000880:	003fb606 	br	800075c <__alt_data_end+0xfc00075c>
 8000884:	0005883a 	mov	r2,zero
 8000888:	003ffb06 	br	8000878 <__alt_data_end+0xfc000878>

0800088c <__mulsi3>:
 800088c:	0005883a 	mov	r2,zero
 8000890:	20000726 	beq	r4,zero,80008b0 <__mulsi3+0x24>
 8000894:	20c0004c 	andi	r3,r4,1
 8000898:	2008d07a 	srli	r4,r4,1
 800089c:	18000126 	beq	r3,zero,80008a4 <__mulsi3+0x18>
 80008a0:	1145883a 	add	r2,r2,r5
 80008a4:	294b883a 	add	r5,r5,r5
 80008a8:	203ffa1e 	bne	r4,zero,8000894 <__alt_data_end+0xfc000894>
 80008ac:	f800283a 	ret
 80008b0:	f800283a 	ret

080008b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80008b4:	defffd04 	addi	sp,sp,-12
 80008b8:	df000215 	stw	fp,8(sp)
 80008bc:	df000204 	addi	fp,sp,8
 80008c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80008c4:	0001883a 	nop
 80008c8:	e0bfff17 	ldw	r2,-4(fp)
 80008cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80008d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80008d4:	10000226 	beq	r2,zero,80008e0 <_exit+0x2c>
    ALT_SIM_FAIL();
 80008d8:	002af070 	cmpltui	zero,zero,43969
 80008dc:	00000106 	br	80008e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80008e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80008e4:	003fff06 	br	80008e4 <__alt_data_end+0xfc0008e4>
